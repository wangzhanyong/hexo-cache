const cacheList = <%- cacheList %>
const cacheKey = 'hexo-cache-v<%=version%>'
<% if (ignoreRequestKeywords) { %>
const ignoreRequestKeywords = <%- ignoreRequestKeywords %>
<% } %>
const matchOptions = {
  ignoreSearch: true,
  ignoreMethod: true,
  ignoreVary: true
}
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(cacheKey)
      .then(cache => {
        return cache.addAll(cacheList)
      })
      .then(() => {
        self.skipWaiting()
      })
  )
})

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(keys => {
      Promise.all(keys.map(key => {
        if (key !== cacheKey) {
          return caches.delete(key)
        }
      }))
        .then(() => {
          self.clients.claim()
        })
    })
  )
})

const isIgnore = (request) => {
  if (request.method !== 'GET') return true
  ignoreRequestKeywords.some(keyword => {
    if (request.url.includes(keyword)) {
      console.log('Ignored: ', keyword)
      return true
    }
  })
  return false
}

self.addEventListener('fetch', event => {
  if (isIgnore(event.request)) return fetch(event.request)
  event.respondWith(
    caches.match(event.request, matchOptions)
      .then(function (response) {
        if (response) {
          return response
        }
        console.log('Cache missed: ', event.request.url)
        throw Error('go catch')
      })
      .catch(() => {
        return fetch(event.request).then(response=>{
          if (!response.ok) {
            return response
          }
          const responseClone = response.clone()
          caches.open(cacheKey)
          .then(cache => {
            cache.put(event.request.url, responseClone)
          })
          return response
        })
      })
  )
})
